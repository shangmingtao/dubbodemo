<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
           http://www.springframework.org/schema/aop   
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-autowire="byName" default-lazy-init="false">

	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${mq.brokerURL}" />
        <property name="userName" value="${mq.userName}"></property>
        <property name="password" value="${mq.password}"></property>
		<!--<property name="clientID" value="client1"></property>-->
	</bean>

	<!-- ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory 可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗。 要producervemq-pool包 -->
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="targetConnectionFactory" />
		<property name="maxConnections" value="10" />
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
	</bean>

	<!-- 定义消息Queue Destination -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="${queueName.notify}"/>
	</bean>

	<!-- 定义消息Topic Destination -->
	<bean id="topicDestination"  class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="${topicName.notify}"/>
	</bean>

	<!-- queue Linstener start -->
	<bean id="JMSSpringQueueLintener" class="cn.milo.spring_consumer.JMSSpringQueueListener"></bean>

	<bean id="JMSSpringQueueContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory"></property>
		<property name="destination" ref="queueDestination"></property>
		<property name="messageListener" ref="JMSSpringQueueLintener"></property>
	</bean>
	<!-- queue Linstener end -->


	<!-- topic Linstener start -->
	<bean id="JMSSpringTopicLintener" class="cn.milo.spring_consumer.JMSSpringTopicListener"></bean>

	<bean id="consumerListenerClient1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 开启订阅模式 -->
		<property name="pubSubDomain" value="true"/>
		<property name="destination" ref="topicDestination" />
		<property name="subscriptionDurable" value="false"/> <!-- 设置是否是消息持久化的订阅 -->
		<!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
		<!--<property name="clientId" value="client2"/>-->
		<property name="messageListener" ref="JMSSpringTopicLintener" />
		<!-- 消息应答方式
             Session.AUTO_ACKNOWLEDGE  消息自动签收
             Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
             Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
        -->
		<property name="sessionAcknowledgeMode" value="1"/>
	</bean>
	<!-- topic Linstener end -->


</beans>